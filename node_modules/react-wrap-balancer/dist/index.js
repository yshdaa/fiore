"use client"
var P=Object.create;var m=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var W=Object.getOwnPropertyNames;var $=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var Y=(e,n)=>{for(var t in n)m(e,t,{get:n[t],enumerable:!0})},v=(e,n,t,r)=>{if(n&&typeof n=="object"||typeof n=="function")for(let o of W(n))!L.call(e,o)&&o!==t&&m(e,o,{get:()=>n[o],enumerable:!(r=M(n,o))||r.enumerable});return e};var R=(e,n,t)=>(t=e!=null?P($(e)):{},v(n||!e||!e.__esModule?m(t,"default",{value:e,enumerable:!0}):t,e)),A=e=>v(m({},"__esModule",{value:!0}),e);var D={};Y(D,{Balancer:()=>I,Provider:()=>K,default:()=>z});module.exports=A(D);var i=R(require("react"));var p=R(require("react")),b=typeof window=="undefined",y=b?p.default.useEffect:p.default.useLayoutEffect,H=0,S=()=>++H,T=!1;function N(){let[e,n]=p.default.useState(T?S:void 0);return y(()=>{e===void 0&&n(S()),T=!0},[]),e===void 0?e:`rwb-${e.toString(32)}`}function g(){return p.default.useMemo(()=>"useId"in p.default?p.default.useId:N,[])()}var E="__wrap_b",f="__wrap_n",h="__wrap_o",x=(e,n,t)=>{t=t||document.querySelector(`[data-br="${e}"]`);let r=t==null?void 0:t.parentElement;if(!r)return;let o=u=>t.style.maxWidth=u+"px";t.style.maxWidth="";let l=r.clientWidth,d=r.clientHeight,s=l/2-.25,a=l+.5,c;if(l){for(o(s),s=Math.max(t.scrollWidth,s);s+1<a;)c=Math.round((s+a)/2),o(c),r.clientHeight===d?a=c:s=c;o(a*n+l*(1-n))}t.__wrap_o||(typeof ResizeObserver!="undefined"?(t.__wrap_o=new ResizeObserver(()=>{self.__wrap_b(0,+t.dataset.brr,t)})).observe(r):process.env.NODE_ENV==="development"&&console.warn("The browser you are using does not support the ResizeObserver API. Please consider add polyfill for this API to avoid potential layout shifts or upgrade your browser. Read more: https://github.com/shuding/react-wrap-balancer#browser-support-information"))},V=x.toString(),C='(self.CSS&&CSS.supports("text-wrap","balance")?1:2)',B=(e,n,t="")=>(t&&(t=`self.${f}!=1&&${t}`),i.default.createElement("script",{suppressHydrationWarning:!0,dangerouslySetInnerHTML:{__html:(e?"":`self.${f}=self.${f}||${C};self.${E}=${V};`)+t},nonce:n})),O=i.default.createContext({preferNative:!0,hasProvider:!1}),K=({preferNative:e=!0,nonce:n,children:t})=>{let r=i.default.useMemo(()=>({preferNative:e,hasProvider:!0}),[e]);return i.default.createElement(O.Provider,{value:r},B(!1,n),t)},I=i.default.forwardRef(({ratio:e=1,preferNative:n,nonce:t,children:r,as:o,...l},d)=>{let s=g(),a=i.default.useRef(),c=i.default.useContext(O),u=n!=null?n:c.preferNative,w=o||"span";return i.default.useImperativeHandle(d,()=>a.current,[]),y(()=>{u&&self[f]===1||a.current&&(self[E]=x)(0,e,a.current)},[r,u,e]),y(()=>{if(!(u&&self[f]===1))return()=>{if(!a.current)return;let _=a.current[h];_&&(_.disconnect(),delete a.current[h])}},[u]),process.env.NODE_ENV==="development"&&r&&!Array.isArray(r)&&typeof r=="object"&&"type"in r&&typeof r.type=="string"&&r.type!=="span"&&console.warn(`<Balancer> should not wrap <${r.type}> inside. Instead, it should directly wrap text or inline nodes.

Try changing this:
  <Balancer><${r.type}>content</${r.type}></Balancer>
To:
  <${r.type}><Balancer>content</Balancer></${r.type}>`),i.default.createElement(i.default.Fragment,null,i.default.createElement(w,{...l,"data-br":s,"data-brr":e,ref:a,style:{display:"inline-block",verticalAlign:"top",textDecoration:"inherit",textWrap:u?"balance":"initial"},suppressHydrationWarning:!0},r),B(c.hasProvider,t,`self.${E}("${s}",${e})`))});if(!b&&process.env.NODE_ENV!=="production"){let e=document.querySelector("[data-next-hide-fouc]");if(e){let n=r=>{for(let o of r)for(let l of Array.from(o.removedNodes)){if(l!==e)continue;t.disconnect();let d=document.querySelectorAll("[data-br]");for(let s of Array.from(d))self[E](0,+s.dataset.brr,s)}},t=new MutationObserver(n);t.observe(document.head,{childList:!0})}}var z=I;0&&(module.exports={Balancer,Provider});
//# sourceMappingURL=index.js.map